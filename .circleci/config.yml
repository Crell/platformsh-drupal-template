version: 2

# Environment variables required by the project:
# GIT_EMAIL
# GIT_NAME
# PLATFORMSH_CLI_TOKEN
# PLATFORM_GIT_REPO
# PLATFORM_PROJECT_ID
# SITE_UUID
jobs:
  build:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.3.x-backstop
      - image: selenium/standalone-chrome-debug:3.6.0
      - image: kporras07/lighthouse-ci:nonheadless
      - image: mariadb:5.5
        environment:
          MYSQL_DATABASE: drupal
          MYSQL_ROOT_PASSWORD: drupal
    working_directory: /var/www/local_site
    steps:
      - run: apt-get update -y && apt-get install python -y
      - run: echo 127.0.0.1 local_site.local | tee -a /etc/hosts
      - checkout
      - restore_cache:
          keys:
            - npm-cache-{{ checksum "package.json" }}
            - composer-cache-{{ checksum "composer.lock" }}
      - run: npm install
      - save_cache:
          key: npm-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
            php -r "copy('https://composer.github.io/installer.sig', 'composer-setup.sig');" && \
            php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('composer-setup.sig'))) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;" && \
            php composer-setup.php && \
            php -r "unlink('composer-setup.php');"
            mv composer.phar /usr/bin/composer
      - run:
          name: Configure Nginx
          command: |
            cp ./.circleci/local_site /etc/nginx/sites-available/default
      - run:
          name: Build site.
          command: |
            cp ./.circleci/settings.secret.php ./settings/
            composer install
            chmod 777 -R ./web/sites/default/files
            /usr/bin/env PHP_OPTIONS="-d sendmail_path=`which true`"
            echo "Installing the site..."
            ./vendor/bin/drush si bloom -y
            if [ -f /var/www/local_site/config/sync/core.extension.yml ]; then
              echo "Setting the site uuid..."
              ./vendor/bin/drush config:set system.site uuid $SITE_UUID -y
              echo "Importing config..."
              ./vendor/bin/drush cim -y
              ./vendor/bin/drush cim -y
            fi
            if [ -f ./themes/custom/CUSTOMTHEME/package.json ]; then
              cd ./themes/custom/CUSTOMTHEME
              if [ ! -d ./node_modules ]; then npm install; fi
              npm run build
              cd /var/www/local_site
              echo "Cleaning cache..."
            fi
      - run:
          name: Coding Standards Linters
          command: |
            ./node_modules/.bin/gulp phplint
            ./node_modules/.bin/gulp drupalcs
            ./node_modules/.bin/gulp eslint
      - run:
          name: Behat Testing
          command: |
            /etc/init.d/nginx start > nginx.log &
            /etc/init.d/php7.3-fpm start > php7.3-fpm.log &
            ./vendor/bin/behat -p circle
      - run:
          name: Lighthouse
          command: |
            mkdir /tmp/lighthouse
            curl -X POST -H "Content-Type: application/json" -H "X-API-KEY: abc123" --data '{"output": "html", "url": "http://local_site.local"}' http://localhost:8080/ci > /tmp/lighthouse/output.html
      - store_artifacts:
          path: /tmp/lighthouse
          destination: lighthouse
      - run:
          name: Export database
          command: |
            cd /var/www/local_site/web
            ../vendor/bin/drush sql-dump --result-file=../export.sql
      - persist_to_workspace:
          root: /var/www/
          paths: local_site

  visual-regression:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.3.x-backstop
      - image: mariadb:5.5
        environment:
          MYSQL_DATABASE: drupal
          MYSQL_ROOT_PASSWORD: drupal
    working_directory: /var/www/local_site
    steps:
      - attach_workspace:
          at: /var/www
      - run: echo 127.0.0.1 local_site.local | tee -a /etc/hosts
      - run:
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
            php -r "copy('https://composer.github.io/installer.sig', 'composer-setup.sig');" && \
            php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('composer-setup.sig'))) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;" && \
            php composer-setup.php && \
            php -r "unlink('composer-setup.php');"
            mv composer.phar /usr/bin/composer
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Import db
          command: |
            dockerize -wait tcp://localhost:3306 -timeout 2m
            cd /var/www/local_site/web
            cat ../export.sql | ../vendor/bin/drush sqlc
      - run:
          name: Backstop
          command: |
            cp ./.circleci/local_site /etc/nginx/sites-available/default
            /etc/init.d/nginx start > nginx.log &
            /etc/init.d/php7.3-fpm start > php7.3-fpm.log &
            backstop reference
            backstop test
      - store_artifacts:
          path: ./backstop_data
          destination: backstop

  deploy-dev:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.3.x-backstop
    working_directory: /var/www/local_site
    steps:
      - checkout
      - run:
          name: Install Platform CLI
          command: |
            curl -sS https://platform.sh/cli/installer | php
      - add_ssh_keys:
      - run:
          name: Deploy commands
          no_output_timeout: 20m
          command: |
            git config --global user.email $GIT_EMAIL
            git config --global user.name $GIT_NAME
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            ./scripts/deploy.sh dev "Auto deploy triggered from master branch"
            /root/.platformsh/bin/platform drush cc drush -p $PLATFORM_PROJECT_ID -e dev
            /root/.platformsh/bin/platform drush si -p $PLATFORM_PROJECT_ID -e dev -- bloom --account-pass=admin -y
            /root/.platformsh/bin/platform drush config:set -p $PLATFORM_PROJECT_ID -e dev -- "system.site" uuid "$SITE_UUID" -y
            /root/.platformsh/bin/platform drush cim -p $PLATFORM_PROJECT_ID -e dev -- -y
            /root/.platformsh/bin/platform drush cr -p $PLATFORM_PROJECT_ID -e dev

  deploy-staging:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.3.x
    working_directory: /var/www/local_site
    steps:
      - run:
          name: Install Platform CLI
          command: |
            curl -sS https://platform.sh/cli/installer | php
      - add_ssh_keys:
      - run:
          name: Deploy commands
          command: |
            git config --global user.email $GIT_EMAIL
            git config --global user.name $GIT_NAME
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            /root/.platformsh/bin/platform drush cc drush -p $PLATFORM_PROJECT_ID -e staging
            /root/.platformsh/bin/platform drush cr -p $PLATFORM_PROJECT_ID -e staging
            /root/.platformsh/bin/platform merge -p $PLATFORM_PROJECT_ID -e dev -y || true
            /root/.platformsh/bin/platform sync data -p $PLATFORM_PROJECT_ID -e staging -y || true
            /root/.platformsh/bin/platform drush sqlsan -p $PLATFORM_PROJECT_ID -e staging -- --sanitize-password=admin -y
            /root/.platformsh/bin/platform drush updb -p $PLATFORM_PROJECT_ID -e staging -- -y
            /root/.platformsh/bin/platform drush cim -p $PLATFORM_PROJECT_ID -e staging -- -y
            /root/.platformsh/bin/platform drush cr -p $PLATFORM_PROJECT_ID -e staging

  deploy-live:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.3.x
    working_directory: /var/www/local_site
    steps:
      - run:
          name: Install Platform CLI
          command: |
            curl -sS https://platform.sh/cli/installer | php
      - add_ssh_keys:
      - run:
          name: Deploy commands
          command: |
            git config --global user.email $GIT_EMAIL
            git config --global user.name $GIT_NAME
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            /root/.platformsh/bin/platform backup:create -p $PLATFORM_PROJECT_ID -e master -y
            /root/.platformsh/bin/platform drush cc drush -p $PLATFORM_PROJECT_ID -e master
            /root/.platformsh/bin/platform drush cr -p $PLATFORM_PROJECT_ID -e master
            /root/.platformsh/bin/platform merge -p $PLATFORM_PROJECT_ID -e staging -y || true
            /root/.platformsh/bin/platform drush updb -p $PLATFORM_PROJECT_ID -e master -- -y
            /root/.platformsh/bin/platform drush cim -p $PLATFORM_PROJECT_ID -e master -- -y
            /root/.platformsh/bin/platform drush cr -p $PLATFORM_PROJECT_ID -e master

workflows:
  version: 2
  build-deploys:
    jobs:
      - build
      - visual-regression:
          requires:
            - build
      - deploy-dev:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy-staging:
          requires:
            - deploy-dev
      - deploy-live-hold:
          type: approval
          requires:
            - deploy-staging
      - deploy-live:
          requires:
            - deploy-live-hold
